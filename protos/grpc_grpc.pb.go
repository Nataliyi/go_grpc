// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterizationAPIClient is the client API for ClusterizationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterizationAPIClient interface {
	UnaryClasterization(ctx context.Context, in *GRPCRequest, opts ...grpc.CallOption) (*GRPCResponse, error)
	StreamClasterization(ctx context.Context, opts ...grpc.CallOption) (ClusterizationAPI_StreamClasterizationClient, error)
}

type clusterizationAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterizationAPIClient(cc grpc.ClientConnInterface) ClusterizationAPIClient {
	return &clusterizationAPIClient{cc}
}

func (c *clusterizationAPIClient) UnaryClasterization(ctx context.Context, in *GRPCRequest, opts ...grpc.CallOption) (*GRPCResponse, error) {
	out := new(GRPCResponse)
	err := c.cc.Invoke(ctx, "/ClusterizationAPI/UnaryClasterization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterizationAPIClient) StreamClasterization(ctx context.Context, opts ...grpc.CallOption) (ClusterizationAPI_StreamClasterizationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClusterizationAPI_ServiceDesc.Streams[0], "/ClusterizationAPI/StreamClasterization", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterizationAPIStreamClasterizationClient{stream}
	return x, nil
}

type ClusterizationAPI_StreamClasterizationClient interface {
	Send(*GRPCRequest) error
	Recv() (*GRPCResponse, error)
	grpc.ClientStream
}

type clusterizationAPIStreamClasterizationClient struct {
	grpc.ClientStream
}

func (x *clusterizationAPIStreamClasterizationClient) Send(m *GRPCRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterizationAPIStreamClasterizationClient) Recv() (*GRPCResponse, error) {
	m := new(GRPCResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClusterizationAPIServer is the server API for ClusterizationAPI service.
// All implementations must embed UnimplementedClusterizationAPIServer
// for forward compatibility
type ClusterizationAPIServer interface {
	UnaryClasterization(context.Context, *GRPCRequest) (*GRPCResponse, error)
	StreamClasterization(ClusterizationAPI_StreamClasterizationServer) error
	mustEmbedUnimplementedClusterizationAPIServer()
}

// UnimplementedClusterizationAPIServer must be embedded to have forward compatible implementations.
type UnimplementedClusterizationAPIServer struct {
}

func (UnimplementedClusterizationAPIServer) UnaryClasterization(context.Context, *GRPCRequest) (*GRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryClasterization not implemented")
}
func (UnimplementedClusterizationAPIServer) StreamClasterization(ClusterizationAPI_StreamClasterizationServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamClasterization not implemented")
}
func (UnimplementedClusterizationAPIServer) mustEmbedUnimplementedClusterizationAPIServer() {}

// UnsafeClusterizationAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterizationAPIServer will
// result in compilation errors.
type UnsafeClusterizationAPIServer interface {
	mustEmbedUnimplementedClusterizationAPIServer()
}

func RegisterClusterizationAPIServer(s grpc.ServiceRegistrar, srv ClusterizationAPIServer) {
	s.RegisterService(&ClusterizationAPI_ServiceDesc, srv)
}

func _ClusterizationAPI_UnaryClasterization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterizationAPIServer).UnaryClasterization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClusterizationAPI/UnaryClasterization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterizationAPIServer).UnaryClasterization(ctx, req.(*GRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterizationAPI_StreamClasterization_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterizationAPIServer).StreamClasterization(&clusterizationAPIStreamClasterizationServer{stream})
}

type ClusterizationAPI_StreamClasterizationServer interface {
	Send(*GRPCResponse) error
	Recv() (*GRPCRequest, error)
	grpc.ServerStream
}

type clusterizationAPIStreamClasterizationServer struct {
	grpc.ServerStream
}

func (x *clusterizationAPIStreamClasterizationServer) Send(m *GRPCResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterizationAPIStreamClasterizationServer) Recv() (*GRPCRequest, error) {
	m := new(GRPCRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClusterizationAPI_ServiceDesc is the grpc.ServiceDesc for ClusterizationAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterizationAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClusterizationAPI",
	HandlerType: (*ClusterizationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryClasterization",
			Handler:    _ClusterizationAPI_UnaryClasterization_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamClasterization",
			Handler:       _ClusterizationAPI_StreamClasterization_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/grpc.proto",
}
